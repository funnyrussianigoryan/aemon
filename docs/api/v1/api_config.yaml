components:
  schemas:
    HTTPValidationError:
      properties:
        detail:
          items:
            $ref: '#/components/schemas/ValidationError'
          title: Detail
          type: array
      title: HTTPValidationError
      type: object
    Item:
      description: Product item model.
      properties:
        category:
          title: Category
          type: string
        created_at:
          anyOf:
          - format: date-time
            type: string
          - type: 'null'
          title: Created At
        description:
          anyOf:
          - type: string
          - type: 'null'
          title: Description
        id:
          anyOf:
          - type: integer
          - type: 'null'
          title: Id
        in_stock:
          default: true
          title: In Stock
          type: boolean
        name:
          title: Name
          type: string
        price:
          title: Price
          type: number
      required:
      - name
      - price
      - category
      title: Item
      type: object
    Order:
      description: Order model.
      properties:
        created_at:
          anyOf:
          - format: date-time
            type: string
          - type: 'null'
          title: Created At
        id:
          anyOf:
          - type: integer
          - type: 'null'
          title: Id
        items:
          items:
            type: integer
          title: Items
          type: array
        status:
          default: pending
          title: Status
          type: string
        total:
          title: Total
          type: number
        user_id:
          title: User Id
          type: integer
      required:
      - user_id
      - items
      - total
      title: Order
      type: object
    User:
      description: User model.
      properties:
        email:
          title: Email
          type: string
        full_name:
          anyOf:
          - type: string
          - type: 'null'
          title: Full Name
        id:
          anyOf:
          - type: integer
          - type: 'null'
          title: Id
        is_active:
          default: true
          title: Is Active
          type: boolean
        username:
          title: Username
          type: string
      required:
      - username
      - email
      title: User
      type: object
    ValidationError:
      properties:
        loc:
          items:
            anyOf:
            - type: string
            - type: integer
          title: Location
          type: array
        msg:
          title: Message
          type: string
        type:
          title: Error Type
          type: string
      required:
      - loc
      - msg
      - type
      title: ValidationError
      type: object
info:
  contact:
    email: support@example.com
    name: API Support Team
    url: https://example.com/contact
  description: A comprehensive example API for e-commerce platform
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  title: Example E-commerce API
  version: 2.0.0
  x-generated-at: '2025-07-25T17:02:22.741789'
  x-generated-by: aemon
openapi: 3.1.0
paths:
  /:
    get:
      description: Welcome endpoint.
      operationId: read_root__get
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
      summary: Read Root
      tags:
      - root
  /health:
    get:
      description: Health check endpoint.
      operationId: health_check_health_get
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
      summary: Health Check
      tags:
      - monitoring
  /items:
    get:
      description: Get all items with optional filtering.
      operationId: get_items_items_get
      parameters:
      - in: query
        name: category
        required: false
        schema:
          anyOf:
          - type: string
          - type: 'null'
          title: Category
      - in: query
        name: in_stock
        required: false
        schema:
          anyOf:
          - type: boolean
          - type: 'null'
          title: In Stock
      - in: query
        name: limit
        required: false
        schema:
          default: 100
          title: Limit
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Item'
                title: Response Get Items Items Get
                type: array
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Get Items
      tags:
      - items
    post:
      description: Create a new item.
      operationId: create_item_items_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Create Item
      tags:
      - items
  /items/{item_id}:
    delete:
      description: Delete an item.
      operationId: delete_item_items__item_id__delete
      parameters:
      - in: path
        name: item_id
        required: true
        schema:
          title: Item Id
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Delete Item
      tags:
      - items
    get:
      description: Get a specific item by ID.
      operationId: get_item_items__item_id__get
      parameters:
      - in: path
        name: item_id
        required: true
        schema:
          title: Item Id
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Get Item
      tags:
      - items
    put:
      description: Update an existing item.
      operationId: update_item_items__item_id__put
      parameters:
      - in: path
        name: item_id
        required: true
        schema:
          title: Item Id
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Update Item
      tags:
      - items
  /orders:
    get:
      description: Get all orders with optional filtering.
      operationId: get_orders_orders_get
      parameters:
      - in: query
        name: user_id
        required: false
        schema:
          anyOf:
          - type: integer
          - type: 'null'
          title: User Id
      - in: query
        name: status
        required: false
        schema:
          anyOf:
          - type: string
          - type: 'null'
          title: Status
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Order'
                title: Response Get Orders Orders Get
                type: array
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Get Orders
      tags:
      - orders
    post:
      description: Create a new order.
      operationId: create_order_orders_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Create Order
      tags:
      - orders
  /orders/{order_id}:
    get:
      description: Get a specific order by ID.
      operationId: get_order_orders__order_id__get
      parameters:
      - in: path
        name: order_id
        required: true
        schema:
          title: Order Id
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Get Order
      tags:
      - orders
  /orders/{order_id}/status:
    put:
      description: Update order status.
      operationId: update_order_status_orders__order_id__status_put
      parameters:
      - in: path
        name: order_id
        required: true
        schema:
          title: Order Id
          type: integer
      - in: query
        name: status
        required: true
        schema:
          title: Status
          type: string
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Update Order Status
      tags:
      - orders
  /stats:
    get:
      description: Get platform statistics.
      operationId: get_statistics_stats_get
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
      summary: Get Statistics
      tags:
      - statistics
  /users:
    get:
      description: Get all users.
      operationId: get_users_users_get
      parameters:
      - in: query
        name: limit
        required: false
        schema:
          default: 100
          title: Limit
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                title: Response Get Users Users Get
                type: array
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Get Users
      tags:
      - users
    post:
      description: Create a new user.
      operationId: create_user_users_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Create User
      tags:
      - users
  /users/{user_id}:
    get:
      description: Get a specific user by ID.
      operationId: get_user_users__user_id__get
      parameters:
      - in: path
        name: user_id
        required: true
        schema:
          title: User Id
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Get User
      tags:
      - users
